name: Build and Push to ECR

on:
  push:
  pull_request:

permissions:
  contents: read
  pull-requests	: write
  actions: write

env:
  AWS_REGION: us-east-1 
  AWS_AZ: us-east-1a
  ECR_REPOSITORY: learn-ecs
  ECR_REGISTRY: 286812073492.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: 'Terraform Environment'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Jenkins to Amazon ECR
      run: |
        if [ ${{ github.event_name }} == 'pull_request' ]; then
          BRANCH_NAME=${{ github.head_ref }}
        else
          BRANCH_NAME=${GITHUB_REF##*/}
        fi
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f docker/Dockerfile .

    - name: Push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
      run: |
        if [ ${{ github.event_name }} == 'pull_request' ]; then
          BRANCH_NAME=${{ github.head_ref }}
        else
          BRANCH_NAME=${GITHUB_REF##*/}
        fi
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_NAME

  terraform-apply:
    name: 'Terraform Apply'
    # Don't run multiple terraform jobs simultaneously
    concurrency:
      group: ${{ github.ref }}-terraform  
      cancel-in-progress: false
    runs-on: ubuntu-latest
    environment: 'Terraform Environment'
    defaults:
      run:
        shell: bash
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    needs: build-and-push
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run setup jobs
      uses: ./.github/actions/terraform-setup
      with:
        aws_region: "us-east-1"
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Plan
      run: |
        touch /tmp/jenkins_output.txt
        cd terraform 
        terraform plan -var region="${{ env.AWS_REGION }}" -var availability_zone="${{ env.AWS_AZ }}" \
          -var jenkins_web_ecr_image="286812073492.dkr.ecr.us-east-1.amazonaws.com/learn-ecs:latest" \
          -var jenkins_admin_password="${{ secrets.JENKINS_ADMIN_PASSWORD }}" \
          -var jenkins_admin_password_arn="${{ secrets.JENKINS_ADMIN_PASSWORD_ARN }}" -input=false -out=tfplan 

    - name: Save Output to JSON
      run: |
        cd terraform
        terraform show -json tfplan | jq -R 'fromjson? | select(.)' > tfplan.json

    - name: Upload Terraform Plan
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan.json

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: cd terraform && terraform apply -auto-approve -input=false tfplan
    
    # Comment on the PR with a link to the Terraform Plan artifact
    - name: Comment on Pull Request
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number,
            body: `Terraform plan uploaded: [terraform-plan](${{ steps.upload-artifact.outputs.artifact-url }})`
          })
            
  terraform-destroy:
    name: 'Terraform Destroy'
    # Don't run multiple terraform jobs simultaneously
    concurrency:
      group: ${{ github.ref }}-terraform
      cancel-in-progress: false
    runs-on: ubuntu-latest
    environment: 'Terraform Environment'
    if: github.ref == 'refs/heads/main'
    needs: terraform-apply
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run setup jobs
      uses: ./.github/actions/terraform-setup
      with:
        aws_region: "us-east-1"
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
    - name: Empty S3 Buckets
      run: |
        cd terraform
        aws s3api list-object-versions --bucket learn-ecs-logging-bucket --output json \
          | jq -r '.Versions[] | "aws s3api delete-object --bucket learn-ecs-logging-bucket --key \(.Key) --version-id \(.VersionId)"' \
          | bash

        aws s3api list-object-versions --bucket learn-ecs-logging-bucket --output json \
          | jq -r '.DeleteMarkers[] | "aws s3api delete-object --bucket learn-ecs-logging-bucket --key \(.Key) --version-id \(.VersionId)"' \
          | bash
        aws s3 rm s3://learn-ecs-logging-bucket --recursive

    - name: Terraform Destroy
      run: |
        touch /tmp/jenkins_output.txt
        cd terraform 
        terraform destroy -var availability_zone="${{ env.AWS_AZ }}" \
          -var jenkins_web_ecr_image="286812073492.dkr.ecr.us-east-1.amazonaws.com/learn-ecs:latest" \
          -var jenkins_admin_password="${{ secrets.JENKINS_ADMIN_PASSWORD }}" \
          -var jenkins_admin_password_arn="${{ secrets.JENKINS_ADMIN_PASSWORD_ARN }}" -input=false \
          -auto-approve
